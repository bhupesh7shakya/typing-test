/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pak1;

import java.util.Date;
import java.util.Random;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author Bhupesh
 */
public class TypingTest extends javax.swing.JFrame {
//Creating the neccessay global variable 
//creating the global variable
//storing the string in array of text
    String text[] = {"The Universe contains billions of galaxies,\n"
        + " each containing millions or billions of stars. \n"
        + "The space between the stars and galaxies is largely empty.\n"
        + " However, even places far from stars and planets contain\n"
        + " scattered particles of dust or a few hydrogen atoms\n"
        + " per cubic centimeter.", "The Universe is everything\n",
         " we can touch, feel, sense, measure or detect. ",
         "It includes living things, planets, ",
         "stars, galaxies, dust clouds, light, and even time.",
         " Before the birth of the Universe, time, space and matter did not exist. ",
        "The Universe contains billions of galaxies, each containing \n "
        + "millions or billions of stars. ",
         "The space between the stars and galaxies is largely empty.",
         " However, even places far from stars and ",
         "planets contain scattered particles of dust or ",
         "a few hydrogen atoms per cubic centimeter. ",
        " The Universe is incredibly huge. ",
         "It would take a modern jet fighter ",
         "more than a million years to reach the nearest star to the Sun. ",
        "Travelling at the speed of light (300,000 km per second), ",
         "it would take 100,000 years to cross our Milky Way galaxy alone.",
        " No one knows the exact size of the Universe,",
         " because we cannot see the edge – if there is one. ",
         "All we do know is that the visible Universe ",
         " at least 93 billion light years across.",
         "(A light year is the distance light travels in one year – about 9 trillion km.)",
        "Hellow world today I am gonna show you how to download gta",
        "The Universe has not always been the same size.",
         " Scientists believe it began in a Big Bang,",
        " which took place nearly 14 billion years ago. ",
         "Since then, the Universe has been expanding outward at very high speed. ",
         "So the area of space we now see is billions of times bigger ",
         "than it was when the Universe was very young. ",
         "Space is also filled with radiation (e.g. light and heat), ",
         "magnetic fields and high energy particles (e.g. cosmic rays). ",
         "The galaxies are also moving further apart as the space between them expands."};
    //initiazling the random class
    Random random = new Random();
    //storing and finding the length of text
    int tl = text.length;
//    creating string variable
    String TextGenerated;
//    initializing the the date
    Date date = new Date();
//   for the calculating the time user start and finish the task
    long Starttime;
    long Endtime;
    float Totaltime;
//    storing the string typed by user
    String texttyped;
//    creted the to count the no of erros done by the user
    int count = 0;
   
   
    /**
     * Creates new form TypingTest
     */
    public TypingTest() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextTyped = new javax.swing.JTextArea();
        Start = new javax.swing.JButton();
        WPM = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Errors = new javax.swing.JLabel();
        Done = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        RandomText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ErrorList = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Rod", 1, 18)); // NOI18N
        jLabel1.setText("Typing Test");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jLabel3.setText("Speed");

        TextTyped.setColumns(20);
        TextTyped.setRows(5);
        jScrollPane1.setViewportView(TextTyped);

        Start.setText("START");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        WPM.setText("0");

        jLabel2.setText("Errors");

        Errors.setText("0");

        Done.setText("Done");
        Done.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoneActionPerformed(evt);
            }
        });

        RandomText.setColumns(20);
        RandomText.setRows(5);
        jScrollPane2.setViewportView(RandomText);

        jLabel4.setText(" WPM");

        jLabel5.setText("Mistake made:");

        ErrorList.setColumns(20);
        ErrorList.setRows(5);
        jScrollPane4.setViewportView(ErrorList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Start)
                .addGap(77, 77, 77)
                .addComponent(Done)
                .addGap(358, 358, 358))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(WPM, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Errors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(8, 8, 8)))
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(WPM)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Errors))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Done)
                    .addComponent(Start))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        // TODO add your handling code here:
        //this is the start button method
//        storing the random value limiting the length of t1 which is length ot text
        int RandomNumber = random.nextInt(tl);
//        storing the random text of text array by passing random value
        TextGenerated = text[RandomNumber];
        //storing the started time onclick of button
        Starttime = System.currentTimeMillis();
        //    System.out.println(Starttime);
        //text will appear in text area
       RandomText.setText(TextGenerated);
       //diabaling the cut and pate
       RandomText.setEditable(false);
       //disbaling the copy and paste
       RandomText.setTransferHandler(null);
   //this will clear the error list and text typed
       ErrorList.setText("");
        TextTyped.setText("");
   // this will reset the WPM and Errors
        WPM=null;
        Errors=null;
    }//GEN-LAST:event_StartActionPerformed

    private void DoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoneActionPerformed

        // TODO add your handling code here:
        //this is the done button method
//        getting and storing the text typed by user
        texttyped = TextTyped.getText();
      //checking if user have left null or not
        if (texttyped == null) {
            TextTyped.setText("You cant leave null!!!!!!!!!!!!!");
        } else {
            //if the the user didnot input the null then
            // gerated string are splitted or character is store in in array of wordcounter
            //word generated
            String wordcounted[] = TextGenerated.split(" ");
            int wcg = wordcounted.length;
            System.out.println(wcg);
            // typed string are splitted or character is store in in array of wordcounter
            //word typed
            String wordcount[] = texttyped.split(" ");
            //int ttl=wordcount.length;
            System.out.println(texttyped.length() + "is length of typed string+");
            //System.out.println(ttl);
           //using the loop  to access the index of array
           //the conditoin is wcg-1 because wcg denotes the total length of wordcounted 
//           which is counted from 1 and array starts from 0 in which array index becomes 1 lesser than 
//           length and length becomes greater than index which will cause exception
//            array index out of bounds
            for (int i = 0; i <= wcg - 1; i++) {
                //comparingthe two string
                if (wordcounted[i].equals(wordcount[i])) {

                } else {
//                  else this be printed in error section and show erros made by you
                    ErrorList.append("you have typed"+"  "+wordcount[i] + " " + "instead of" + " " + wordcounted[i] + "\n");
                   //and there will be increament in the error counter
                    count++;
                }

                //this for wpm
//                storing the time after the user click on done button
                Endtime = System.currentTimeMillis();
//                calculating the total time which is being converted into seconds from milliseconds
                Totaltime = TimeUnit.MILLISECONDS.toSeconds((Endtime - Starttime));
//                converting it into the minutes
                float tt = Totaltime / 60;
                System.out.println("Totaltime" + Totaltime);
                // int ttl=texttyped.length();

                System.out.println("this is length:" + texttyped.length());
                System.out.println(tt);
//                finding the out the total word by dividing the by 5 
//              since the word is the no of 5 character
                int wordcounter = texttyped.length() / 5;
                System.out.println("this is total word:" + wordcounter);
//                calculating the speed in which the total word is subtracted from errors made and divided by time taked
//               to complete the task
                int Speed = (int) ((wordcounter - count) / tt);
                System.out.println("this Speed:" + Speed);
//                casting from int to string
                String speed = Integer.toString(Speed);
                String errors = Integer.toString(count);
                System.out.println(Speed + " " + "WPM which is also net wpm" + " " + "total errors:" + count);
//                showing the output the user
                WPM.setText(speed);
                Errors.setText(errors + " " + "Errors");
            }

    }//GEN-LAST:event_DoneActionPerformed
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TypingTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TypingTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TypingTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TypingTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TypingTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Done;
    private javax.swing.JTextArea ErrorList;
    private javax.swing.JLabel Errors;
    private javax.swing.JTextArea RandomText;
    public javax.swing.JButton Start;
    private javax.swing.JTextArea TextTyped;
    private javax.swing.JLabel WPM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
